openapi: 3.0.3
info:
  title: Mercado Dibre
  version: 1.0.0
  description: Projeto M5
paths:
  /api/cart/:
    get:
      operationId: api_cart_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
          description: ''
  /api/cart/product/:
    get:
      operationId: api_cart_product_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartProduct'
          description: ''
    post:
      operationId: api_cart_product_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CartProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CartProduct'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProduct'
          description: ''
  /api/cart/product/{id}/:
    get:
      operationId: api_cart_product_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProduct'
          description: ''
    delete:
      operationId: api_cart_product_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/coupons/:
    get:
      operationId: product_get
      description: Retrieve all products
      summary: Retrieve all coupons - All users
      tags:
      - Coupon
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coupon'
          description: ''
    post:
      operationId: coupon_post
      description: Create new coupon
      summary: Create new coupon - Seller and Admin only
      tags:
      - Coupon
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Coupon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Coupon'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
  /api/coupons/{coupon_id}/:
    get:
      operationId: api_coupons_retrieve
      parameters:
      - in: path
        name: coupon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
    put:
      operationId: api_coupons_update
      parameters:
      - in: path
        name: coupon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Coupon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Coupon'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
    patch:
      operationId: api_coupons_partial_update
      parameters:
      - in: path
        name: coupon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCoupon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCoupon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCoupon'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
          description: ''
    delete:
      operationId: api_coupons_destroy
      parameters:
      - in: path
        name: coupon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/login/:
    post:
      operationId: api_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/products/:
    get:
      operationId: product_get_2
      description: Retrieve all products
      summary: Retrieve all products - All users
      tags:
      - Product
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: product_post
      description: Create new product
      summary: Create new product - Seller and Admin only
      tags:
      - Product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/products/{product_id}/:
    get:
      operationId: product_detail_get
      description: Retrieve product by ID
      summary: Retrieve product - All users
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Detail
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_products_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: product_detail_patch
      description: Update product by ID
      summary: Update product - User owner & Admin only
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Detail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: product_detail_delete
      description: Delete product by ID
      summary: Delete product - User owner & Admin only
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Detail
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/products/{product_id}/comments/:
    get:
      operationId: product_comment_get
      description: Retrieve all products comment
      summary: Retrieve all products comment - All users
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Comments
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductComments'
          description: ''
    post:
      operationId: product_comment_post
      description: Add new product comment
      summary: Add new product comment - User & Admin only
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - Product Comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductComments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductComments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductComments'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductComments'
          description: ''
  /api/products/comments/{comment_id}/:
    get:
      operationId: product_comment_detail_get
      description: Retrieve comment by ID
      summary: Retrieve comment - All users
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - Product Comments Detail
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductComments'
          description: ''
    put:
      operationId: api_products_comments_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductComments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductComments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductComments'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductComments'
          description: ''
    patch:
      operationId: product_comment_detail_patch
      description: Update product comment by ID
      summary: Update product comment - User owner & Admin only
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - Product Comments Detail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProductComments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProductComments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProductComments'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductComments'
          description: ''
    delete:
      operationId: product_comment_detail_delete
      description: Delete product comment by ID
      summary: Delete product comment - User owner & Admin only
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - Product Comments Detail
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: user_get
      description: Retrieve all users
      summary: Retrieve all users - All users
      tags:
      - User
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: user_post
      description: Create new user
      summary: Create new user - All users
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: user_detail_get
      description: Retrieve user by ID
      summary: Retrieve user - User owner & Admin only
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Detail
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: user_detail_patch
      description: Update user by ID
      summary: Update user - User owner & Admin only
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Detail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: user_detail_delete
      description: Soft Delete user by ID
      summary: Soft Delete - User owner & Admin only
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - User Detail
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/{user_id}/addresses/:
    get:
      operationId: api_users_addresses_list
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
          description: ''
    post:
      operationId: api_users_addresses_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
  /api/users/{user_id}/addresses/{id}/:
    get:
      operationId: api_users_addresses_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    put:
      operationId: api_users_addresses_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Address'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Address'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    patch:
      operationId: api_users_addresses_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAddress'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
          description: ''
    delete:
      operationId: api_users_addresses_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/orders/:
    get:
      operationId: api_users_orders_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
    post:
      operationId: api_users_orders_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /api/wishlist/:
    get:
      operationId: api_wishlist_retrieve
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
          description: ''
  /api/wishlist/add/{product_id}/:
    put:
      operationId: api_wishlist_add_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WishList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WishList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
          description: ''
    patch:
      operationId: api_wishlist_add_partial_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWishList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWishList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWishList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
          description: ''
  /api/wishlist/remove/{product_id}/:
    put:
      operationId: api_wishlist_remove_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/WishList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WishList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
          description: ''
    patch:
      operationId: api_wishlist_remove_partial_update
      parameters:
      - in: path
        name: product_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWishList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWishList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWishList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
          description: ''
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 120
        number:
          type: string
          maxLength: 20
        neighborhood:
          type: string
          maxLength: 120
        city:
          type: string
          maxLength: 120
        state:
          type: string
          maxLength: 120
        country:
          type: string
          maxLength: 50
        zipcode:
          type: string
          maxLength: 9
        is_default:
          type: boolean
        user_id:
          type: integer
          readOnly: true
      required:
      - city
      - country
      - id
      - neighborhood
      - number
      - state
      - street
      - user_id
      - zipcode
    Cart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        product_list:
          type: array
          items:
            $ref: '#/components/schemas/CartProductDetail'
          readOnly: true
      required:
      - id
      - owner
      - product_list
    CartProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart_id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        product:
          type: integer
      required:
      - cart_id
      - id
      - product
    CartProductDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        cart_id:
          type: integer
          readOnly: true
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        product:
          $ref: '#/components/schemas/Product'
      required:
      - cart_id
      - id
      - product
    Coupon:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        coupon:
          type: string
          maxLength: 16
        discount:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        is_valid:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - coupon
      - created_at
      - discount
      - id
    Nested:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        price:
          type: number
          format: double
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        description:
          type: string
        img:
          type: string
          maxLength: 255
        seller:
          type: integer
      required:
      - description
      - id
      - img
      - name
      - price
      - quantity
      - seller
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        seller:
          type: integer
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        ordered_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - id
      - ordered_at
      - seller
      - user
    PatchedAddress:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 120
        number:
          type: string
          maxLength: 20
        neighborhood:
          type: string
          maxLength: 120
        city:
          type: string
          maxLength: 120
        state:
          type: string
          maxLength: 120
        country:
          type: string
          maxLength: 50
        zipcode:
          type: string
          maxLength: 9
        is_default:
          type: boolean
        user_id:
          type: integer
          readOnly: true
    PatchedCoupon:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        coupon:
          type: string
          maxLength: 16
        discount:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        is_valid:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        price:
          type: number
          format: double
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        description:
          type: string
        img:
          type: string
          maxLength: 255
        seller_id:
          type: integer
          readOnly: true
    PatchedProductComments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
        product_rate:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        user_id:
          type: integer
          readOnly: true
        product_id:
          type: integer
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_seller:
          type: boolean
    PatchedWishList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
        price:
          type: number
          format: double
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        description:
          type: string
        img:
          type: string
          maxLength: 255
        seller_id:
          type: integer
          readOnly: true
      required:
      - description
      - id
      - img
      - name
      - price
      - quantity
      - seller_id
    ProductComments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
        product_rate:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        user_id:
          type: integer
          readOnly: true
        product_id:
          type: integer
          readOnly: true
      required:
      - comment
      - id
      - product_id
      - product_rate
      - user_id
    StatusEnum:
      enum:
      - Pending
      - In Transit
      - Shipped
      type: string
      description: |-
        * `Pending` - Pending
        * `In Transit` - Intransit
        * `Shipped` - Shipped
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          maxLength: 128
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_seller:
          type: boolean
      required:
      - email
      - first_name
      - id
      - last_name
      - password
      - username
    WishList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - id
      - products
      - user_id
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
